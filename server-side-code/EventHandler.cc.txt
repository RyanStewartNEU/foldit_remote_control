// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

#include <interactive/gui/EventHandler.hh>

#include <interactive/application/GUIMutex.hh>
#include <interactive/gui/LabelPanel.hh>
#include <interactive/gui/Point2D.hh>

#include <iostream>

namespace interactive {
namespace gui {
	
EventHandler::EventHandler() : takes_keyboard_focus_(false) {}

EventHandler::~EventHandler()
{
	HOLD_GUI_MUTEX;

	if (label_panel_) {
		label_panel_->cleanup();
	}
}

void
EventHandler::update(core::Real time)
{
}

void
EventHandler::on_mouse_move(const Point2D & p, int buttons_down)
{
	HOLD_GUI_MUTEX;
	
	if (on_mouse_move_)
		on_mouse_move_(p, buttons_down);
}

void
EventHandler::on_mouse_down(const Point2D & p, int button_down, bool is_double)
{
	HOLD_GUI_MUTEX;
	
	if (on_mouse_down_)
		on_mouse_down_(p, button_down, is_double);
}

void
EventHandler::on_mouse_up(const Point2D & p, int button_up)
{
	HOLD_GUI_MUTEX;
	
	if (on_mouse_up_)
		on_mouse_up_(p, button_up);
}

void
EventHandler::on_mouse_wheel(const Point2D & p, int delta)
{
	HOLD_GUI_MUTEX;
	
	if (on_mouse_wheel_)
		on_mouse_wheel_(p, delta);
}

bool
EventHandler::takes_keyboard_focus() const
{
	HOLD_GUI_MUTEX;
	
	return takes_keyboard_focus_;
}

void
EventHandler::set_takes_keyboard_focus(bool takes_focus)
{
	HOLD_GUI_MUTEX;
	
	takes_keyboard_focus_ = takes_focus;
}

void
EventHandler::set_tab_next(EventHandlerAP next)
{
	HOLD_GUI_MUTEX;
	
	tab_next_ = next;
	next->tab_previous_ = this;
}

EventHandlerAP
EventHandler::get_tab_next()
{
	HOLD_GUI_MUTEX;

	return tab_next_;
}

EventHandlerAP
EventHandler::get_tab_previous()
{
	HOLD_GUI_MUTEX;

	return tab_previous_;
}

void
EventHandler::on_text(unsigned char key)
{
	HOLD_GUI_MUTEX;
	
	if (on_text_)
		on_text_(key);
}

void
EventHandler::on_key_down(application::Key key)
{
	HOLD_GUI_MUTEX;
	
	if (on_key_down_)
		on_key_down_(key);
}

void
EventHandler::on_get_highlight()
{
	HOLD_GUI_MUTEX;
	
	if (on_get_highlight_) {
		on_get_highlight_();
	}
}

void
EventHandler::on_lose_highlight()
{
	HOLD_GUI_MUTEX;
	
	if (on_lose_highlight_) {
		on_lose_highlight_();
	}
}

void
EventHandler::set_mouse_move_callback(MouseCallback cb)
{
	HOLD_GUI_MUTEX;
	
	on_mouse_move_ = cb;
}

void
EventHandler::set_mouse_down_callback(MouseDownCallback cb)
{
	HOLD_GUI_MUTEX;
	
	on_mouse_down_ = cb;
}

void
EventHandler::set_mouse_up_callback(MouseCallback cb)
{
	HOLD_GUI_MUTEX;
	
	on_mouse_up_ = cb;
}

void
EventHandler::set_mouse_wheel_callback(MouseWheelCallback cb)
{
	HOLD_GUI_MUTEX;
	
	on_mouse_wheel_ = cb;
}

void
EventHandler::set_text_callback(TextCallback cb)
{
	HOLD_GUI_MUTEX;
	
	on_text_ = cb;
}

void
EventHandler::set_key_down_callback(KeyCallback cb)
{
	HOLD_GUI_MUTEX;
	
	on_key_down_ = cb;
}

void
EventHandler::set_get_highlight_callback(HighlightCallback cb)
{
	HOLD_GUI_MUTEX;

	on_get_highlight_ = cb;
}

void
EventHandler::set_lose_highlight_callback(HighlightCallback cb)
{
	HOLD_GUI_MUTEX;

	on_lose_highlight_ = cb;
}

void
EventHandler::set_tooltip_text(const std::string & tooltip_text)
{
	HOLD_GUI_MUTEX;

	tooltip_text_ = tooltip_text;
}

const std::string &
EventHandler::get_tooltip_text()
{
	HOLD_GUI_MUTEX;

	return tooltip_text_;
}

void
EventHandler::set_label_panel(LabelPanelOP label_panel)
{
	HOLD_GUI_MUTEX;

	if (label_panel_) {
		label_panel_->set_labelled_handler(NULL);
		label_panel_->cleanup();
	}

	label_panel_ = label_panel;

	if (label_panel_) {
		label_panel_->set_labelled_handler(this);
		label_panel->add_to_parent();
	}
}

Point2D
EventHandler::get_target() const
{
	return Point2D(0, 0);
}

void
EventHandler::set_debug_name(const std::string & debug_name)
{
	HOLD_GUI_MUTEX;

	debug_name_ = debug_name;
}

EventHandlerOP
EventHandler::get_handler_with_debug_name(const std::string & debug_name)
{
	HOLD_GUI_MUTEX;

	if (debug_name == debug_name_) {
		return this;
	} else {
		return NULL;
	}
}

} /* gui */
} /* interactive */
