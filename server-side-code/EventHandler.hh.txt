// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

#ifndef _INTERACTIVE_GUI_EVENTHANDLER_HH_
#define _INTERACTIVE_GUI_EVENTHANDLER_HH_

#include <interactive/application/input_codes.hh>
#include <interactive/gui/EventHandler.fwd.hh>
#include <interactive/gui/LabelPanel.fwd.hh>
#include <interactive/gui/Point2D.fwd.hh>

#include <core/types.hh>
#include <utility/pointer/ReferenceCount.hh>

#include <boost/function.hpp>

#include <string>

namespace interactive {
namespace gui {

/** \brief Handles mouse events.
	
	Allows the user to register and deregister mouse events with this
	widget. One of the registered events will be a virtual function
	call to this object's event handlers.
	
**/

class EventHandler : public utility::pointer::ReferenceCount {
public:
	EventHandler();                                              ///< Constructor.
	virtual ~EventHandler();                                     ///< Destructor.
	
	/// Update the animation for the current time.
	virtual
	void
	update(core::Real time);

	/// Default mouse move handler (defaults to registered callback).
	virtual
	void
	on_mouse_move(const Point2D & p, int buttons_down);
	
	/// Default mouse down handler (defaults to registered callback).
	virtual
	void
	on_mouse_down(const Point2D & p, int button_down, bool is_double);

	/// Default mouse up handler (defaults to registered callback).
	virtual
	void
	on_mouse_up(const Point2D & p, int button_up);

	/// Default mouse wheel handler (defaults to registered callback)
	virtual
	void
	on_mouse_wheel(const Point2D & p, int delta);

	/// If this function returns true than this widget will take the keyboard
	/// focus if clicked.
	bool
	takes_keyboard_focus() const;
	
	/// Sets whether or not this widget takes the keyboard focus.
	void
	set_takes_keyboard_focus(bool takes_focus);

	/// Sets the handler to which the keyboard focus is sent on a tab.
	/// Sets this to be that handler's previous on a tab.
	void
	set_tab_next(EventHandlerAP next);

	/// Gets the next handler for a tab.
	virtual
	EventHandlerAP
	get_tab_next();

	/// Gets the next handler for a tab.
	virtual
	EventHandlerAP
	get_tab_previous();

	/// Default text handler (defaults to registered callback)
	virtual
	void
	on_text(unsigned char text);

	/// Default key handler (defaults to registered callback)
	virtual
	void
	on_key_down(application::Key key);

	/// Called when first highlighted (defaults to registered callback)
	virtual
	void
	on_get_highlight();
	
	/// Called when highlight passes to another handler (defaults to registered callback)
	virtual
	void
	on_lose_highlight();
	
	typedef boost::function< void (const Point2D &, int, bool) > MouseDownCallback;
	typedef boost::function< void (const Point2D &, int) > MouseCallback;
	typedef boost::function< void (const Point2D &, int) > MouseWheelCallback;
	typedef boost::function< void (unsigned char) > TextCallback;
	typedef boost::function< void (application::Key) > KeyCallback;
	typedef boost::function< void () > HighlightCallback;

	// The callbacks can also be set with function objects.
	void set_mouse_move_callback(MouseCallback cb);         ///< Set mouse move callback.
	void set_mouse_down_callback(MouseDownCallback cb);     ///< Set mouse button down callback.
	void set_mouse_up_callback(MouseCallback cb);           ///< Set mouse button up callback.
	void set_mouse_wheel_callback(MouseWheelCallback cb);   ///< Set the mouse wheel callback.
	void set_text_callback(TextCallback cb);                ///< Set text callback.
	void set_key_down_callback(KeyCallback cb);             ///< Set key down callback.
	void set_get_highlight_callback(HighlightCallback cb);  ///< Set callback for mouse over.
	void set_lose_highlight_callback(HighlightCallback cb); ///< Set callback for losing mouse over.
	
	/// set tooltip text
	void
	set_tooltip_text(const std::string & tooltip_text);

	/// set tooltip text
	const std::string &
	get_tooltip_text();

	/// set the label panel
	void
	set_label_panel(LabelPanelOP label_panel);

	/// get the 2D target for anything pointing at this
	virtual
	Point2D
	get_target() const;

	/// Set the event handler's debug name.
	void
	set_debug_name(const std::string & debug_name);

	/// Get the event handler with the given name.
	/// Returns a pointer to the event handler if it can be found, NULL otherwise.
	virtual
	EventHandlerOP
	get_handler_with_debug_name(const std::string & debug_name);

private:

	bool takes_keyboard_focus_;             ///< If true, this widget takes the keyboard focus
	EventHandlerAP tab_next_;               ///< Next handler on tab
	EventHandlerAP tab_previous_;           ///< previous handler on tab

	std::string tooltip_text_;
	LabelPanelOP label_panel_;

	MouseCallback on_mouse_move_;           ///< Called if on_mouse_move() not overriden.
	MouseDownCallback on_mouse_down_;       ///< Called if on_mouse_down() not overriden.
	MouseCallback on_mouse_up_;             ///< Called if on_mouse_up() not overriden.
	MouseWheelCallback on_mouse_wheel_;     ///< Called if on_mouse_wheel() not overriden.
	TextCallback on_text_;                  ///< Called if on_text() not overriden.
	KeyCallback on_key_down_;               ///< Called if on_key_down() not overriden.
	HighlightCallback on_get_highlight_;    ///< Called when you get the highlight.
	HighlightCallback on_lose_highlight_;   ///< Called when you lose the highlight.

	std::string debug_name_;

};
	
} /* gui */
} /* interactive */

#endif /* _INTERACTIVE_GUI_EVENTHANDLER_HH_ */
